// Generated by LiveScript 1.2.0
'use strict';
var Colors, DefaultOptions, isString, isObject, isArray, JSONPrinter, toString$ = {}.toString, slice$ = [].slice;
Colors = {
  bold: ['\x1b[1m', '\x1b[22m'],
  italic: ['\x1b[3m', '\x1b[23m'],
  underline: ['\x1b[4m', '\x1b[24m'],
  inverse: ['\x1b[7m', '\x1b[27m'],
  white: ['\x1b[37m', '\x1b[39m'],
  grey: ['\x1b[90m', '\x1b[39m'],
  black: ['\x1b[30m', '\x1b[39m'],
  blue: ['\x1b[34m', '\x1b[39m'],
  cyan: ['\x1b[36m', '\x1b[39m'],
  green: ['\x1b[32m', '\x1b[39m'],
  magenta: ['\x1b[35m', '\x1b[39m'],
  red: ['\x1b[31m', '\x1b[39m'],
  yellow: ['\x1b[33m', '\x1b[39m']
};
DefaultOptions = {
  quote: '"',
  indent: '    ',
  quoteKeys: true,
  colors: false,
  collapseArray: true,
  commaFirst: false
};
isString = function(it){
  return toString$.call(it).slice(8, -1) === 'String';
};
isObject = function(it){
  return toString$.call(it).slice(8, -1) === 'Object';
};
isArray = function(it){
  return toString$.call(it).slice(8, -1) === 'Array';
};
JSONPrinter = function(options){
  var defaults, print;
  defaults = import$(DefaultOptions, options);
  print = function(input, opts){
    var result, depth, iterate;
    if (!isObject(opts)) {
      opts = {};
    }
    opts = import$(defaults, opts);
    if (!isObject(input)) {
      input = JSON.parse(input);
    }
    result = '';
    depth = 1;
    iterate = function(obj){
      var tab, i, len, isArrayItem, writeDepth, k, val, ref$;
      tab = '';
      i = 0;
      len = 0;
      isArrayItem = isArray(obj);
      result += isArrayItem ? '[' : '{';
      writeDepth = ++depth;
      while (--writeDepth) {
        tab += opts.indent;
      }
      for (k in obj) {
        val = obj[k];
        if (opts.commaFirst) {
          result += isArrayItem && opts.collapseArray
            ? ''
            : '\n' + tab;
          if (len > 0) {
            result += ', ';
          }
        } else {
          if (len > 0) {
            result += ', ';
          }
          if (!isArrayItem && opts.collapseArray) {
            result += '\n' + tab;
          }
        }
        len += 1;
        if (!isArrayItem) {
          if (opts.quoteKeys) {
            result += opts.quote + k + opts.quote + ': ';
          } else {
            result += k + ': ';
          }
        }
        switch (ref$ = [toString$.call(val).slice(8, -1)], false) {
        case 'Object' !== ref$[0]:
          iterate(val);
          break;
        case 'RegExp' !== ref$[0]:
          if (opts.colors) {
            result += Colors.red[0];
          }
          result += val;
          if (opts.colors) {
            result += Colors.red[1];
          }
          break;
        case 'Number' !== ref$[0]:
          if (opts.colors) {
            result += Colors.yellow[0];
          }
          result += val;
          if (opts.colors) {
            result += Colors.yellow[1];
          }
          break;
        case 'String' !== ref$[0]:
          if (opts.colors) {
            result += Colors.green[0];
          }
          result += opts.quote + val + opts.quote;
          if (opts.colors) {
            result += Colors.green[1];
          }
          break;
        case 'Boolean' !== ref$[0]:
          if (opts.colors) {
            result += Colors.blue[0];
          }
          result += val;
          if (opts.colors) {
            result += Colors.blue[1];
          }
        }
      }
      if (!isArrayItem || (isArrayItem && !opts.collapseArray)) {
        result += '\n' + tab.replace(opts.indent, '');
      }
      result += isArrayItem ? ']' : '}';
      depth -= 1;
      return result;
    };
    return iterate(input);
  };
  print.configure = function(conf){
    var key, value;
    for (key in conf) {
      value = conf[key];
      if (defaults.hasOwnProperty(key)) {
        defaults[key] = value;
      }
    }
    return this;
  };
  print.log = function(){
    var args, i$, len$, arg;
    args = slice$.call(arguments);
    for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
      arg = args[i$];
      console.log(print(arg));
    }
    return this;
  };
  return print;
};
module.exports = JSONPrinter(DefaultOptions);
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}